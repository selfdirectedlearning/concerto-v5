AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Concerto EC2: Creates a single EC2 instance running Concerto with MySQL database together.
  **WARNING** You may be billed for the AWS resources used if you create a stack from this template.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Concerto
        Parameters:
          - ConcertoPassword
      - Label:
          default: Web
        Parameters:
          - KeyName
          - WebServerInstanceType
      - Label:
          default: Database
        Parameters:
          - DBPassword
      - Label:
          default: Network
        Parameters:
          - CIDR
          - CIDRA
    ParameterLabels:
      ConcertoPassword:
        default: Password
      KeyName:
        default: Key pair
      WebServerInstanceType:
        default: Instance type
      DBPassword:
        default: Password
      CIDRA:
        default: CIDR for Subnet A

Parameters:
  ConcertoPassword:
    Default: changeme
    Description: Concerto admin account password
    Type: String
    MinLength: 8
    ConstraintDescription: min. 8 characters.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  WebServerInstanceType:
    Description: Web server instance type.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  DBPassword:
    Default: changeme
    Description: Database admin account password
    Type: String
    MinLength: 8
    ConstraintDescription: min. 8 characters.
  CIDR:
    Description: The private IP address range to be used for VPC
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.10.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  CIDRA:
    Description: Address range within the VPC to be used for subnet
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.10.0.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Mappings:
  RegionMap:
    us-east-1:
      ami: ami-0de53d8956e8dcf80
    us-east-2:
      ami: ami-02bcbb802e03574ba
    us-west-1:
      ami: ami-0019ef04ac50be30f
    us-west-2:
      ami: ami-061392db613a6357b
    eu-west-1:
      ami: ami-07683a44e80cd32c5
    eu-west-2:
      ami: ami-09ead922c1dad67e4
    eu-west-3:
      ami: ami-0451ae4fd8dd178f7
    eu-central-1:
      ami: ami-09def150731bdbcc2
    eu-north-1:
      ami: ami-d16fe6af
    ap-northeast-1:
      ami: ami-0f9ae750e8274075b
    ap-northeast-2:
      ami: ami-047f7b46bd6dd5d84
    ap-southeast-1:
      ami: ami-0b419c3a4b01d1859
    ap-southeast-2:
      ami: ami-04481c741a0311bbb
    ap-south-1:
      ami: ami-0889b8a448de4fc44
    ca-central-1:
      ami: ami-03338e1f67dae0168
    sa-east-1:
      ami: ami-0669a96e355eac82f

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDR
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRA
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  InboundSSHNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22
  InboundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  OutBoundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  OutBoundHTTPSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  OutBoundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetA
      NetworkAclId: !Ref NetworkAcl
  IPAddress:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref WebServerInstance
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow ingress via SSH, HTTP ports
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  WebServerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - cfn
            - updates
            - docker
            - concerto
        cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerLaunchConfig --region ${AWS::Region}
                runas=root
              mode: 000400
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        updates:
          packages:
            yum:
              yum-cron: []
          commands:
            01_config:
              command: |
                sed -ri 's/^(.*update_cmd\s*=).*$/\1 security/' yum-cron.conf
                sed -ri 's/^(.*apply_updates\s*=).*$/\1 yes/' yum-cron.conf
              cwd: /etc/yum
          services:
            sysvinit:
              yum-cron:
                enabled: true
                ensureRunning: true
        docker:
          commands:
            01_user:
              command: usermod -a -G docker ec2-user
            02_docker_compose:
              command: |
                curl -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-Linux-x86_64 -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
        concerto:
          commands:
            01_dir:
              command: mkdir -p /home/concerto
            02_download:
              command: wget https://raw.githubusercontent.com/selfdirectedlearning/concerto-v5/master/deploy/docker-compose/docker-compose.yml
              cwd: /home/concerto
            03_config:
              command: !Sub |
                sed -ri 's/^(.*MYSQL_PASSWORD\s*=).*$/\1${DBPassword}/' docker-compose.yml
                sed -ri 's/^(.*MYSQL_ROOT_PASSWORD\s*=).*$/\1${DBPassword}/' docker-compose.yml
                sed -ri 's/^(.*DB_PASSWORD\s*=).*$/\1${DBPassword}/' docker-compose.yml
                sed -ri 's/^(.*CONCERTO_PASSWORD\s*=).*$/\1${ConcertoPassword}/' docker-compose.yml
              cwd: /home/concerto
            04_start:
              command: docker-compose up -d concerto database
              cwd: /home/concerto
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref AWS::Region
        - ami
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      SubnetId: !Ref SubnetA
      InstanceType: !Ref WebServerInstanceType
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          yum update --security -y
          yum -y install aws-cfn-bootstrap
          amazon-linux-extras install -y docker
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource WebServerInstance --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WebServerInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

Outputs:
  URL:
    Value: !Sub
      - http://${PublicIp}/admin
      - PublicIp: !GetAtt WebServerInstance.PublicIp
    Description: Concerto administration panel URL
